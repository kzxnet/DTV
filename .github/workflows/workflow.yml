name: Flutter Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version-tag:
        description: 'Version tag (e.g., v1.0.0)'
        required: true
      is-prerelease:
        description: 'Mark as pre-release'
        type: boolean
        default: false
      build-type:
        description: 'Build type'
        type: choice
        options:
          - apk
          - appbundle
        default: 'apk'

permissions:
  contents: write

env:
  FLUTTER_VERSION: '3.32.4'
  ANDROID_BUILD_TOOLS: "34.0.0"
  GRADLE_OPTS: "-Dorg.gradle.daemon=true -Dorg.gradle.parallel=true -Dorg.gradle.caching=true"
  FLUTTER_HOME: /opt/hostedtoolcache/flutter

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Flutter (with cache check)
        if: steps.flutter-cache.outputs.cache-hit != 'true'
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Verify Flutter
        run: |
          flutter --version
          flutter precache --android

      - name: Cache Pub dependencies
        uses: actions/cache@v3
        id: pub-cache
        with:
          path: |
            ~/.pub-cache
            .dart_tool
          key: pub-${{ runner.os }}-${{ hashFiles('pubspec.lock') }}
          restore-keys: |
            pub-${{ runner.os }}-

      - name: Get dependencies
        run: flutter pub get

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'
          cache: 'gradle'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v2
        with:
          build-tools-version: ${{ env.ANDROID_BUILD_TOOLS }}
          platform-version: "34"
          ndk-version: "25.2.9519653"
          disable-animations: true

      - name: Configure Gradle properties
        run: |
          cat << EOF > android/gradle.properties
          org.gradle.caching=true
          org.gradle.parallel=true
          org.gradle.jvmargs=-Xmx4g -XX:+HeapDumpOnOutOfMemoryError -XX:MaxMetaspaceSize=1g
          android.useAndroidX=true
          android.enableJetifier=true
          EOF

      - name: Build APK or App Bundle
        run: |
          export FLUTTER_BUILD_ARGS="--release --no-tree-shake-icons --verbose"
          if [ "${{ github.event.inputs.build-type || 'apk' }}" = "appbundle" ]; then
            flutter build appbundle $FLUTTER_BUILD_ARGS
          else
            flutter build apk $FLUTTER_BUILD_ARGS --split-per-abi --target-platform android-arm,android-arm64,android-x64
          fi

      - name: Sign APK (if build type is apk)
        if: ${{ github.event.inputs.build-type == 'apk' || github.event.inputs.build-type == '' }}
        run: |
          export PATH="$ANDROID_HOME/build-tools/${{ env.ANDROID_BUILD_TOOLS }}:$PATH"
          
          KEYSTORE_FILE=$(mktemp)
          echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 --decode > "$KEYSTORE_FILE"
          
          find build/app/outputs/flutter-apk -name '*.apk' | xargs -P 4 -I {} \
            apksigner sign \
              --ks "$KEYSTORE_FILE" \
              --ks-pass pass:${{ secrets.ANDROID_KEYSTORE_PASSWORD }} \
              --key-pass pass:${{ secrets.KEY_PASSWORD }} \
              --ks-key-alias "${{ secrets.KEY_ALIAS }}" \
              {}
          
          rm -f "$KEYSTORE_FILE"

      - name: Determine release info
        id: release-info
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "tag=${{ github.event.inputs.version-tag }}" >> $GITHUB_OUTPUT
            echo "release_name=Release ${{ github.event.inputs.version-tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
            echo "release_name=Release ${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release-info.outputs.tag }}
          name: ${{ steps.release-info.outputs.release_name }}
          prerelease: ${{ github.event.inputs.is-prerelease || false }}
          generate_release_notes: true
          files: |
            build/app/outputs/flutter-apk/*.apk
            build/app/outputs/bundle/release/*.aab
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}